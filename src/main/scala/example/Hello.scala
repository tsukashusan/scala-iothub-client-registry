package example


import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
import com.microsoft.azure.sdk.iot.service.{Device, RegistryManager}

import scala.collection.JavaConverters._


object Hello extends Greeting with App {
  
  //println(greeting)
  printDeviceInfo
  def printDeviceInfo() : Unit ={
    if (args.length < 2) {
      println("Parameter length is lower 2.")
      sys.exit
    }
    val raspberrypiNumber = args(0)
    val connectionString = args(1)
    val deviceId = "raspberrypi" + raspberrypiNumber
    val registryManager: RegistryManager = RegistryManager.createFromConnectionString(connectionString)

    // Create a device that's enabled by default, 
    // with an autogenerated key.
    var device: Device = Device.createFromId(deviceId, null, null)

    try {
      device = registryManager.addDevice(device)
    } catch {
      case iote: IotHubException =>{
        // If the device already exists.
        try{
          device = registryManager.getDevice(deviceId)
        }catch {
          case iotf: IotHubException => iotf.printStackTrace
        }

      }
    }
    // Display information about the
    // device you created.
    println("Device Id: " + device.getDeviceId())
    println("Device key: " + device.getPrimaryKey())
  } 
}

trait Greeting {
  lazy val greeting: String = "hello"
}
